var SquareVerifier = artifacts.require('Verifier');

contract('TestSquareVerifier', accounts => {

    const owner = accounts[0];
    const proof = {
        "proof": {
            "a": [
                "0x203bb9021d8d7fcb057d7507deac6a353bd9d3a27a32044ecaa1149327b443a0",
                "0x17a2bd36d9b43500abdab81aecd54815c60b7567d5ed34addb489dac35958196"
            ],
            "b": [
                [
                "0x1c9e91cab272d8a1c94207877b10a835971c397b1b4cc0d64992a75cdabd269a",
                "0x208161c6244e6e67b28fdc2455724453dbb971d0f4f46b0427610273b922eb39"
                ],
                [
                "0x2c59ec30f6afba9fb4081db3b96e9bdcaef2b0ae3a3623a082002bc43bc81b3e",
                "0x0ec7a631282ad0f72cb922b4b472a7191f64a4e5f6e0e72c1ff5d430cd857c02"
                ]
            ],
            "c": [
                "0x048aaa95eaba84156a24c42bb8afe124d2dbc6faf27770b78c3a135455c4cccd",
                "0x243e34c0ceca0affaa7fb1fbcb20388515dcb411d4e1022790578f002a5a28b9"
            ]
            },
        "inputs": [
            "0x0000000000000000000000000000000000000000000000000000000000000009"
        ]
    }

    describe('Verify the solidity contract generated by Zokrates', function () {
        
        beforeEach(async function () { 
            this.contract = await SquareVerifier.new({from: owner});
        })

        it('should verify with correct proof', async function() {
            let result = await this.contract.verifyTx.call(
                    proof.proof.a,
                    proof.proof.b,
                    proof.proof.c, 
                    proof.inputs, 
                    {from: owner}
                );

            assert.equal(result, true); // valid proof
        })

        it('should not verify with incorrect proof', async function() { 
            const invalidProof = {
                "proof": {
                    "a": [
                        "0x203bb9021d8d7fcb057d7507deac6a353bd9d3a27a32044ecaa1149327b443a0",
                        "0x17a2bd36d9b43500abdab81aecd54815c60b7567d5ed34addb489dac35958196"
                    ],
                    "b": [
                        [
                        "0x1c9e91cab272d8a1c94207877b10a835971c397b1b4cc0d64992a75cdabd269a",
                        "0x208161c6244e6e67b28fdc2455724453dbb971d0f4f46b0427610273b922eb39"
                        ],
                        [
                        "0x2c59ec30f6afba9fb4081db3b96e9bdcaef2b0ae3a3623a082002bc43bc81b3e",
                        "0x0ec7a631282ad0f72cb922b4b472a7191f64a4e5f6e0e72c1ff5d430cd857c02"
                        ]
                    ],
                    "c": [
                        "0x048aaa95eaba84156a24c42bb8afe124d2dbc6faf27770b78c3a135455c4cccd",
                        "0x243e34c0ceca0affaa7fb1fbcb20388515dcb411d4e1022790578f002a5a28b9"
                    ]
                },
                "inputs": [
                    "0x0000000000000000000000000000000000000000000000000000000000000008" // altered input to invalidate the proof
                ]
            }

            let result = await this.contract.verifyTx.call(
                invalidProof.proof.a,
                invalidProof.proof.b,
                invalidProof.proof.c, 
                invalidProof.inputs, 
                {from: owner}
            );

            assert.equal(result, false); // invalid proof
        })
    });
})
